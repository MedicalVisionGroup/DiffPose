# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/api/01_ljubljana.ipynb.

# %% auto 0
__all__ = ['LjubljanaDataset']

# %% ../notebooks/api/01_ljubljana.ipynb 3
from pathlib import Path
from typing import Optional, Union

import h5py
import torch
from beartype import beartype

from .calibration import RigidTransform

# %% ../notebooks/api/01_ljubljana.ipynb 5
from diffdrr.utils import parse_intrinsic_matrix


@beartype
class LjubljanaDataset(torch.utils.data.Dataset):
    """
    Get X-ray projections and poses from specimens in the `Ljubljana` dataset.

    Given a specimen ID and projection index, returns the projection and the camera matrix for DiffDRR.
    """

    def __init__(
        self,
        view: str,  # "ap" or "lat" or "ap-max" or "lat-max"
        filename: Optional[Union[str, Path]] = None,  # Path to DeepFluoro h5 file
        preprocess: bool = True,  # Preprocess X-rays
    ):
        self.view = view
        self.preprocess = preprocess

        if filename is None:
            root = Path(__file__).parent.parent.absolute()
            filename = root / "data/ljubljana.h5"
        self.f = h5py.File(filename)

        self.flip_xz = RigidTransform(
            torch.tensor(
                [
                    [0.0, 0.0, -1.0],
                    [0.0, 1.0, 0.0],
                    [1.0, 0.0, 0.0],
                ]
            ),
            torch.zeros(3),
        )

    def __len__(self):
        return 10

    def __getitem__(self, idx):
        idx += 1
        extrinsic = self.f[f"subject{idx:02d}/proj-{self.view}/extrinsic"][:]
        extrinsic = torch.from_numpy(extrinsic)
        extrinsic = RigidTransform(extrinsic[..., :3, :3], extrinsic[:3, 3])

        intrinsic = self.f[f"subject{idx:02d}/proj-{self.view}/intrinsic"][:]
        intrinsic = torch.from_numpy(intrinsic)

        delx = self.f[f"subject{idx:02d}/proj-{self.view}/col-spacing"][()]
        dely = self.f[f"subject{idx:02d}/proj-{self.view}/row-spacing"][()]

        img = torch.from_numpy(self.f[f"subject{idx:02d}/proj-{self.view}/pixels"][:])
        if self.preprocess:
            img += 1
            img = img.max().log() - img.log()

        height, width = img.shape
        focal_len, x0, y0 = parse_intrinsic_matrix(
            intrinsic,
            height,
            width,
            dely,
            delx,
        )

        translate = RigidTransform(
            torch.eye(3),
            torch.tensor([-focal_len / 2, 0.0, 0.0]),
        )
        pose = translate.compose(self.flip_xz).compose(extrinsic.inverse())

        volume = self.f[f"subject{idx:02d}/volume/pixels"][:]
        spacing = self.f[f"subject{idx:02d}/volume/spacing"][:]

        return (
            volume,
            spacing,
            focal_len,
            height,
            width,
            delx,
            dely,
            x0,
            y0,
            img,
            pose,
        )
